<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xll.mapper.OperateLogInfoMapper" >
  <resultMap id="BaseResultMap" type="com.xll.model.OperateLogInfo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="uname" property="uname" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="BIT" />
    <result column="from_ip" property="fromIp" jdbcType="VARCHAR" />
    <result column="operate_func" property="operateFunc" jdbcType="VARCHAR" />
    <result column="visit_method" property="visitMethod" jdbcType="VARCHAR" />
    <result column="visit_method_error_info" property="visitMethodErrorInfo" jdbcType="VARCHAR" />
    <result column="login_out_time" property="loginOutTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, uid, uname, create_time, update_time, status, from_ip, operate_func, visit_method, 
    visit_method_error_info, login_out_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xll.model.OperateLogInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from operate_log_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from operate_log_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from operate_log_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xll.model.OperateLogInfo" >
    insert into operate_log_info (id, uid, uname, 
      create_time, update_time, status, 
      from_ip, operate_func, visit_method, 
      visit_method_error_info, login_out_time)
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{uname,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=BIT}, 
      #{fromIp,jdbcType=VARCHAR}, #{operateFunc,jdbcType=VARCHAR}, #{visitMethod,jdbcType=VARCHAR}, 
      #{visitMethodErrorInfo,jdbcType=VARCHAR}, #{loginOutTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xll.model.OperateLogInfo" >
    insert into operate_log_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="uname != null" >
        uname,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="fromIp != null" >
        from_ip,
      </if>
      <if test="operateFunc != null" >
        operate_func,
      </if>
      <if test="visitMethod != null" >
        visit_method,
      </if>
      <if test="visitMethodErrorInfo != null" >
        visit_method_error_info,
      </if>
      <if test="loginOutTime != null" >
        login_out_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="uname != null" >
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIT},
      </if>
      <if test="fromIp != null" >
        #{fromIp,jdbcType=VARCHAR},
      </if>
      <if test="operateFunc != null" >
        #{operateFunc,jdbcType=VARCHAR},
      </if>
      <if test="visitMethod != null" >
        #{visitMethod,jdbcType=VARCHAR},
      </if>
      <if test="visitMethodErrorInfo != null" >
        #{visitMethodErrorInfo,jdbcType=VARCHAR},
      </if>
      <if test="loginOutTime != null" >
        #{loginOutTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xll.model.OperateLogInfoExample" resultType="java.lang.Integer" >
    select count(*) from operate_log_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.xll.model.OperateLogInfo" >
    update operate_log_info
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="uname != null" >
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=BIT},
      </if>
      <if test="fromIp != null" >
        from_ip = #{fromIp,jdbcType=VARCHAR},
      </if>
      <if test="operateFunc != null" >
        operate_func = #{operateFunc,jdbcType=VARCHAR},
      </if>
      <if test="visitMethod != null" >
        visit_method = #{visitMethod,jdbcType=VARCHAR},
      </if>
      <if test="visitMethodErrorInfo != null" >
        visit_method_error_info = #{visitMethodErrorInfo,jdbcType=VARCHAR},
      </if>
      <if test="loginOutTime != null" >
        login_out_time = #{loginOutTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xll.model.OperateLogInfo" >
    update operate_log_info
    set uid = #{uid,jdbcType=INTEGER},
      uname = #{uname,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=BIT},
      from_ip = #{fromIp,jdbcType=VARCHAR},
      operate_func = #{operateFunc,jdbcType=VARCHAR},
      visit_method = #{visitMethod,jdbcType=VARCHAR},
      visit_method_error_info = #{visitMethodErrorInfo,jdbcType=VARCHAR},
      login_out_time = #{loginOutTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>